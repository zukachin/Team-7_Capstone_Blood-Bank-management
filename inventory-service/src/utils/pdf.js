const PDFDocument = require('pdfkit');

function formatDateLocal(v) {
  if (!v) return 'â€”';
  const d = new Date(v);
  if (isNaN(d)) return String(v);
  return d.toLocaleString();
}

/**
 * generateDonationCertificate(donor, collection, tests, overallStatus, nextEligibleDate)
 * returns Promise<Buffer>
 */
function generateDonationCertificate(donor = {}, collection = {}, tests = {}, overallStatus = 'Passed', nextEligibleDate = null) {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ size: 'A4', margin: 50 });
      const bufs = [];
      doc.on('data', (d) => bufs.push(d));
      doc.on('end', () => resolve(Buffer.concat(bufs)));

      // Header
      doc.fontSize(20).text('Donation Certificate', { align: 'center' });
      doc.moveDown(0.5);

      // Meta
      doc.fontSize(10).text(`Certificate ID: CERT-${collection.collection_id || 'N/A'}`, { align: 'right' });
      doc.moveDown();

      // Donor details
      doc.fontSize(12).text(`Donor: ${donor.donor_name || '-'}`);
      doc.text(`Donor ID: ${donor.donor_id || '-'}`);
      if (donor.email) doc.text(`Email: ${donor.email}`);
      doc.moveDown(0.5);

      // Donation details
      const colDate = formatDateLocal(collection.collection_date);
      doc.text(`Donation Date: ${colDate}`);
      doc.text(`Collection ID: ${collection.collection_id || '-'}`);
      if (collection.centre_id) doc.text(`Centre ID: ${collection.centre_id}`);
      if (collection.camp_id) doc.text(`Camp ID: ${collection.camp_id}`);
      if (collection.bag_size) doc.text(`Bag size: ${collection.bag_size}`);
      if (collection.collected_amount) doc.text(`Collected amount: ${collection.collected_amount}`);
      if (collection.lot_number) doc.text(`Lot number: ${collection.lot_number}`);
      doc.moveDown();

      // Test results
      doc.fontSize(12).text('Test Results', { underline: true });
      doc.moveDown(0.2);
      const testsList = [
        ['HIV', tests.hiv || 'Pending'],
        ['HBsAg', tests.hbsag || 'Pending'],
        ['HCV', tests.hcv || 'Pending'],
        ['Syphilis', tests.syphilis || 'Pending'],
        ['Malaria', tests.malaria || 'Pending'],
      ];
      testsList.forEach(([label, value]) => {
        doc.font('Helvetica-Bold').text(label, { continued: true, width: 150 });
        doc.font('Helvetica').text(`: ${value}`);
      });

      doc.moveDown();
      doc.fontSize(12).text(`Overall status: ${overallStatus}`);
      if (overallStatus === 'Passed' && nextEligibleDate) {
        doc.text(`Next eligible donation date: ${nextEligibleDate}`);
      }
      doc.moveDown(1);

      doc.fontSize(10).text('This certificate is generated by the Blood Bank system.', { align: 'left' });
      doc.moveDown(2);
      doc.text('Authorized signatory', { align: 'right' });
      doc.moveDown(0.5);
      doc.text('____________________', { align: 'right' });
      doc.moveDown();

      doc.fontSize(8).fillColor('gray').text('This certificate is for donor records only. For medical advice refer to a registered practitioner.', { align: 'left' });

      doc.end();
    } catch (err) {
      reject(err);
    }
  });
}

/**
 * generateAppointmentLetter(donor, appointment, centre)
 * returns Promise<Buffer>
 */
function generateAppointmentLetter(donor = {}, appointment = {}, centre = {}) {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ size: 'A4', margin: 50 });
      const bufs = [];
      doc.on('data', (d) => bufs.push(d));
      doc.on('end', () => resolve(Buffer.concat(bufs)));

      // Title
      doc.fontSize(20).text('Blood Donation Appointment Letter', { align: 'center' });
      doc.moveDown(1);

      // Donor details
      doc.fontSize(12).text(`Donor Name: ${donor.name || '-'}`);
      doc.text(`Email: ${donor.email || '-'}`);
      doc.text(`Phone: ${donor.phone || '-'}`);
      doc.moveDown(1);

      // Appointment details
      doc.fontSize(14).text('Appointment Details', { underline: true });
      doc.moveDown(0.5);
      doc.fontSize(12);
      doc.text(`Appointment ID: ${appointment.appointment_id || '-'}`);
      doc.text(`Date: ${formatDateLocal(appointment.appointment_date || appointment.date)}`);
      doc.text(`Time: ${appointment.appointment_time || 'To be confirmed'}`);
      doc.text(`Centre: ${centre.name || appointment.centre_name || appointment.centre_id}`);
      if (centre.address || appointment.centre_address) {
        doc.text(`Centre Address: ${centre.address || appointment.centre_address}`);
      }

      doc.moveDown(1);
      doc.text('Please arrive 10-15 minutes early and bring a valid ID for verification.');

      doc.moveDown(2);
      doc.text('Thank you for your valuable contribution to saving lives!', {
        align: 'center',
        italics: true,
      });

      doc.moveDown(2);
      doc.text('Authorized Signatory', { align: 'right' });
      doc.moveDown();
      doc.text('____________________', { align: 'right' });

      doc.end();
    } catch (err) {
      reject(err);
    }
  });
}

module.exports = {
  generateDonationCertificate,
  generateAppointmentLetter
};
